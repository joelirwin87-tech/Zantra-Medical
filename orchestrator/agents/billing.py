"""Billing agent handles claim preparation and submission."""

from __future__ import annotations

from datetime import date
from typing import Dict, List, Optional


class BillingAgent:
    """Submits insurance claims generated by the practice."""

    def __init__(self) -> None:
        self._pending_claims: List[Dict[str, str]] = []

    def queue_claim(self, claim: Dict[str, str]) -> None:
        required_keys = {"claim_id", "patient_id", "amount"}
        missing = required_keys - set(claim)
        if missing:
            missing_keys = ", ".join(sorted(missing))
            raise ValueError(f"Claim is missing required fields: {missing_keys}")
        self._pending_claims.append(claim)

    def submit_claims(self, as_of: Optional[date] = None) -> Dict[str, object]:
        """Submit queued claims and return a submission summary."""

        as_of = as_of or date.today()
        submitted = list(self._pending_claims)
        self._pending_claims.clear()
        return {
            "as_of": as_of.isoformat(),
            "submitted_count": len(submitted),
            "claims": submitted,
        }
